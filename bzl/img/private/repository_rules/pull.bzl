load(
    ":download.bzl",
    _download_blob = "download_blob",
    _download_manifest = "download_manifest",
)

def _pull_impl(rctx):
    have_valid_digest = True
    if len(rctx.attr.digest) != 71:
        have_valid_digest = False
    elif not rctx.attr.digest.startswith("sha256:"):
        have_valid_digest = False
    reference = rctx.attr.digest if have_valid_digest else rctx.attr.tag
    manifest_kwargs = dict(
        canonical_id = rctx.attr.repository + ":" + rctx.attr.tag,
    )
    manifest = _download_manifest(rctx, reference = reference, **manifest_kwargs)
    manifest_media_type = manifest.get("mediaType", "unknown")

    # index is a list of tuples
    # whith platform identifiers paired with manifest data
    index = []
    manifests = []
    if manifest_media_type == MEDIA_TYPE_INDEX:
        is_index = True
        manifests = manifest.get("manifests", [])
    elif manifest_media_type == MEDIA_TYPE_MANIFEST:
        config = _download_blob(rctx, digest = manifest["config"]["digest"])
        index.append(({
            "digest": rctx.attr.digest,
            "size": len(rctx.read("blobs/sha256/" + rctx.attr.digest)),
            "platform": {
                "architecture": config.get("architecture", "unknown"),
                "os": config.get("os", "unknown"),
            },
        }, manifest, config))
    else:
        fail("invalid mediaType in manifest: {}".format(manifest_media_type))

    # download all manifests and configs
    for manifest_index in manifests:
        if manifest_index.get("mediaType") != MEDIA_TYPE_MANIFEST:
            continue
        manifest = _download_manifest(rctx, reference = manifest_index["digest"])
        config = _download_blob(rctx, digest = manifest["config"]["digest"])
        index.append((manifest_index, manifest, config))

    # prepare encoded, structured metadata about the image
    manifest_infos = [
        dict(
            base_image = None,
            manifest = "//:blobs/sha256/" + manifest_index["digest"].removeprefix("sha256:"),
            config = "//:blobs/sha256/" + manifest["config"]["digest"].removeprefix("sha256:"),
            structured_config = config,
            architecture = config.get("architecture", "unknown"),
            os = config.get("os", "unknown"),
            platform = manifest_index.get("platform", {}),
            layers = None,
            missing_blobs = [
                layer.get("digest", "").removeprefix("sha256:")
                for layer in manifest.get("layers", [])
            ],
        )
        for (manifest_index, manifest, config) in index
    ]
    json_payload = manifest_infos if is_index else manifest_infos[0]
    rctx.file(
        "BUILD.bazel",
        content = """
# This file was generated by the pull repository rule.
load("@rules_img//bzl/img/private:import.bzl", "import_from_json")

_encoded = {json_payload}
import_from_json(
    name = "image",
    encoded = _encoded,
)

""".format(json_payload = repr(json.encode(json_payload))),
    )

pull = repository_rule(
    implementation = _pull_impl,
    attrs = {
        "registry": attr.string(),
        "registries": attr.string_list(),
        "repository": attr.string(
            mandatory = True,
        ),
        "tag": attr.string(
            mandatory = True,
        ),
        "digest": attr.string(),
    },
)

MEDIA_TYPE_INDEX = "application/vnd.oci.image.index.v1+json"
MEDIA_TYPE_MANIFEST = "application/vnd.oci.image.manifest.v1+json"
